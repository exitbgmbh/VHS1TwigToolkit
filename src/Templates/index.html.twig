<!DOCTYPE html>
<html lang="de">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
        <link rel="stylesheet" href="/assets/third-party/bootstrap/bootstrap.min.css">
        <link rel="stylesheet" href="/assets/third-party/json-editor/jsoneditor.css">
        <link href="https://fonts.googleapis.com/icon?family=Material+Icons"
              rel="stylesheet">
        <title>BlisstributeTwigToolkit</title>
        <style>
            iframe {
                height: 100%;
                border: 0;
                width: 100%;
            }
            .bg-dark {
                background-color: #323639 !important
            }
            .input-group>.input-group-prepend>.input-group-text {
                min-width: 116px;
            }
            .form-control::-webkit-input-placeholder { color: #c8c8c8; }  /* WebKit, Blink, Edge */
            .form-control:-moz-placeholder { color: #c8c8c8; }  /* Mozilla Firefox 4 to 18 */
            .form-control::-moz-placeholder { color: #c8c8c8; }  /* Mozilla Firefox 19+ */
            .form-control:-ms-input-placeholder { color: #c8c8c8; }  /* Internet Explorer 10-11 */
            .form-control::-ms-input-placeholder { color: #c8c8c8; }  /* Microsoft Edge */
            ul:first-child {
                color: #fff;
            }
            #settingsForm > ul > li:nth-child(1) > a {
                line-height: 2;
                font-size: xx-large;
            }
            #settingsForm > ul > li > a {
                color: #fff;
            }
            .menu {
                min-width: 400px;
            }
            .modal-content {
                max-height: 95vh;
                height: 95vh;
            }
            .modal-body {
                overflow-y: auto;
            }
            .jsoneditor {
                border: thin solid #17a2b8;
            }
            .jsoneditor-menu {
                background-color: #17a2b8;
                border-color: #17a2b8;
            }
        </style>
    </head>
    <body>

        <div class="container-fluid">
            <div class="row">
                <div class="col-2 min-vh-100 bg-dark pt-3 menu">
                    <form id="settingsForm" action="" method="post">
                        <input type="hidden" id="hidden-reload" name="forceReload" value="" />
                        <ul class="nav flex-column flex-nowrap overflow-hidden">

                            <li class="nav-item">
                                <a class="navbar-link" href="/">BlisstributeTwigToolkit</a>
                            </li>

                            <li class="nav-item">
                                <a class="navbar-link" target="_blank" href="https://github.com/exitbgmbh/BlisstributeTwigToolkit">v0.3 &copy;{{ year }} exitB GmbH</a>
                            </li>

                            <li class="nav-item mt-3">
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <label class="input-group-text" for="kind">Art</label>
                                    </div>
                                    <select class="custom-select d-block w-10" id="kind" name="kind" required>
                                        {% for value, display in kinds %}
                                            <option value="{{ value }}" {% if value is same as(kind) %} selected="selected" {% endif %}>{{ display }}</option>
                                        {% endfor %}
                                    </select>
                                </div>
                            </li>

                            <li class="nav-item mt-3">
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <label class="input-group-text" for="type">Typ</label>
                                    </div>
                                    <select class="custom-select d-block w-10" id="type" name="type" required>
                                        {% for kind, templateTypes in types %}
                                            {% for templateType in templateTypes %}
                                                <option value="{{ templateType.renderer }}" {% if templateType.renderer is same as(type) %} selected="selected" {% endif %}>{{ templateType.name }}</option>
                                            {% endfor %}
                                        {% endfor %}
                                    </select>
                                </div>
                            </li>

                            <li class="nav-item mt-3">
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <label class="input-group-text" for="template">Template</label>
                                    </div>
                                    <input placeholder="default_invoice.html" type="text" class="form-control" id="template" name="template" aria-label="templates" aria-describedby="ig-template-label" required {% if template is defined and template is not null %} value="{{ template }}" {% endif %} onchange="loadCachingData(getQueryParams())" />
                                </div>
                            </li>

                            <li class="nav-item mt-3">
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <label class="input-group-text" for="identifiers">Identifikation</label>
                                    </div>
                                    <input type="text" placeholder="EXB202012323" class="form-control" id="identifiers" name="identifiers" aria-label="identifiers" aria-describedby="ig-identifiers-label" required {% if identifiers is defined and identifiers is not null %} value="{{ identifiers }}" {% endif %} onchange="loadCachingData(getQueryParams())" />
                                </div>
                            </li>

                            <li class="nav-item mt-3">
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <label class="input-group-text" for="productId">Produkt ID</label>
                                    </div>
                                    <input type="text" placeholder="123456" class="form-control" id="productId" name="productId" aria-label="productId" aria-describedby="ig-identifiers-label" {% if productId is defined and productId is not null %} value="{{ productId }}" {% endif %} onchange="loadCachingData(getQueryParams())" />
                                </div>
                            </li>

                            <li class="nav-item mt-3">
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <label class="input-group-text" for="advertisingMediumCode">Werbemittel</label>
                                    </div>
                                    <input type="text" placeholder="EXB" class="form-control" id="advertisingMediumCode" name="advertisingMediumCode" aria-label="advertising-medium" aria-describedby="ig-advertising-medium-label" {% if advertisingMediumCode is defined and advertisingMediumCode is not null %} value="{{ advertisingMediumCode }}" {% endif %} onchange="loadCachingData(getQueryParams())" />
                                </div>
                            </li>

                            {% if languages is defined and languages is not empty %}
                                <li class="nav-item mt-3">
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <label class="input-group-text" for="language">Sprache</label>
                                        </div>
                                        <select class="custom-select d-block w-10" id="language" name="language">
                                            <option value="">Bitte wählen</option>
                                            {% for language in languages %}
                                                <option value="{{ language.isoCode }}" {% if selectedLanguage is same as(language.isoCode) %} selected="selected" {% endif %}>{{ language.name }}</option>
                                            {% endfor %}
                                        </select>
                                    </div>
                                </li>
                            {% endif %}

                            <li class="nav-item mt-3">
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <label class="input-group-text" for="size">Grösse <span data-toggle="tooltip" title="Angabe der Grösse in Millimetern (10 x 10) oder DIN-A Form" style='margin-left: 5px' class="material-icons">info</span></label>
                                    </div>
                                    <input type="text" placeholder="A4" class="form-control" id="size" name="size" aria-label="size" aria-describedby="ig-size" {% if size is defined and size is not null %} value="{{ size }}" {% endif %} onchange="loadCachingData(getQueryParams())" />
                                </div>
                            </li>

                            <li class="nav-item mt-3">
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <label class="input-group-text" for="format">Format</label>
                                    </div>
                                    <select class="custom-select d-block w-10" id="format" name="format">
                                        <option value="P" {% if format is defined and format is not empty and format == 'P' %} selected="selected" {% endif %}>Hochformat (Portrait)</option>
                                        <option value="L" {% if format is defined and format is not empty and format == 'L' %} selected="selected" {% endif %}>Querformat (Landscape)</option>
                                    </select>
                                </div>
                            </li>

                            <li class="nav-item mt-3">
                                <button id="createButton" class="btn btn-info btn-sm btn-block" type="button" onclick="submitForm(false)">Erzeugen</button>
                            </li>

                            <li class="nav-item mt-3">
                                <button class="btn btn-light btn-sm btn-block" type="button" onclick="submitForm(true)">Cache leeren</button>
                            </li>

                            <li class="nav-item mt-3">
                                <button id="showContextButton" class="btn btn-secondary btn-sm btn-block" type="button" onClick="showContext(getQueryParams())" disabled>Kontext anzeigen</button>
                            </li>

                            <li class="nav-item mt-3">
                                <button id="showTextModulesButton" class="btn btn-secondary btn-sm btn-block" type="button" onClick="showTextModules(getQueryParams())" disabled>Textbausteine anzeigen</button>
                            </li>

                        </ul>

                    </form>
                </div>
                <div class="col min-vh-100 pl-0 pr-0">
                    {% if iframeSrc is defined and iframeSrc is not empty and errors is defined and errors is empty %}
                        <iframe src="{{ iframeSrc }}" onload="loadCachingData(getQueryParams())">
                        </iframe>
                    {% endif %}
                    {% if errors is defined and errors is not empty %}
                        <div class="container">
                            {{ errors }}
                        </div>
                    {% endif %}
                </div>
            </div>
        </div>

        <div class="modal fade" tabindex="-1" role="dialog" aria-hidden="true" id="contextModal">
            <div class="modal-dialog modal-xl modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Kontext (Datenquelle: <strong>Cache</strong>, ggf. Cache leeren um aktuelle Daten zu sehen)</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div id="contextModalBody" class="modal-body">
                        <div id="jsonContainer"></div>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" tabindex="-1" role="dialog" aria-hidden="true" id="contextTextModules">
            <div class="modal-dialog modal-xl modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Textbausteine (Datenquelle: <strong>Cache</strong>, ggf. Cache leeren um aktuelle Daten zu sehen)</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div id="textModulesModalBody" class="modal-body">
                    </div>
                </div>
            </div>
        </div>

        <script src="/assets/third-party/json-editor/jsoneditor.min.js"></script>
        <script src="/assets/third-party/jQuery/jquery-3.5.1.slim.min.js"></script>
        <script src="/assets/third-party/bootstrap/bootstrap.bundle.min.js"></script>

        <script>

            const loadCachingData = function (queryParams) {
                hasContext(queryParams);
                hasTextModules(queryParams);
            };

            const getQueryParams = function () {
                return new URLSearchParams({
                    kind: document.getElementById('kind').options[document.getElementById('kind').selectedIndex].value,
                    type: document.getElementById('type').options[document.getElementById('type').selectedIndex].value,
                    identifiers: document.getElementById('identifiers').value,
                    productId: document.getElementById('productId').value,
                    advertisingMediumCode: document.getElementById('advertisingMediumCode').value,
                    language: document.getElementById('language').value,
                    size: document.getElementById('size').value,
                    format: document.getElementById('format').value
                });
            };

            const request = (url, queryParams, callback) => {
                let xhr = new XMLHttpRequest();

                xhr.onreadystatechange = callback;
                xhr.open('GET', url + '?' + queryParams.toString());
                xhr.send();
            };

            const hasContext = (queryParams) => {
                let callback = function () {
                    if (this.readyState !== 4) {
                        return;
                    }

                    let contextButton = document.getElementById('showContextButton');

                    let response = JSON.parse(this.responseText);
                    if (!response.hasContext) {
                        contextButton.disabled = true;

                        return;
                    }

                    contextButton.disabled = false;
                };

                request('/api/v1/cache/hasContext', queryParams, callback);
            };

            const showContext = (queryParams) => {
                let callback = function () {
                    if (this.readyState !== 4) {
                        return;
                    }

                    let contextModal = new bootstrap.Modal(document.getElementById('contextModal'));
                    contextModal.show();

                    let jsonContainer = document.getElementById('jsonContainer');
                    jsonContainer.innerHTML = '';

                    let context = JSON.parse(this.responseText);
                    if (Array.isArray(context) && !context.length) {
                        jsonContainer.innerHTML = 'Kein Kontext verfügbar!';

                        return;
                    }

                    let editor = new JSONEditor(jsonContainer, { mode: 'view' }, context);
                };

                request('/api/v1/cache/getContext', queryParams, callback);
            };

            const hasTextModules = function (queryParams) {
                let callback = function () {
                    if (this.readyState !== 4) {
                        return;
                    }

                    let textModulesButton = document.getElementById('showTextModulesButton');

                    let response = JSON.parse(this.responseText);
                    if (!response.hasTextModules) {
                        textModulesButton.disabled = true;

                        return;
                    }

                    textModulesButton.disabled = false;
                };

                request('/api/v1/cache/hasTextModules', queryParams, callback);
            };

            const showTextModules = function (queryParams) {
                let callback = function () {
                    if (this.readyState !== 4) {
                        return;
                    }

                    let textModulesModal = new bootstrap.Modal(document.getElementById('contextTextModules'));
                    textModulesModal.show();

                    let textModules = JSON.parse(this.responseText);
                    let textModulesContainer = document.getElementById('textModulesModalBody');

                    if (Array.isArray(textModules) && !textModules.length) {
                        textModulesContainer.innerHTML = 'Keine Textbausteine verfügbar!';

                        return;
                    }

                    let html = '<table class="table">'
                        +           '<thead class="thead-dark">'
                        +               '<tr>'
                        +                   '<th>#</th>'
                        +                   '<th>Schlüssel</th>'
                        +                   '<th>Wert</th>'
                        +               '</tr>'
                        +           '</thead>'
                        +           '<tbody>'

                    let index = 1;
                    for (let property in textModules) {
                        if (!textModules.hasOwnProperty(property)) {
                            continue;
                        }

                        html += '<tr>'
                            +       '<td>' + index + '</td>'
                            +       '<td>' + property + '</td>'
                            +       '<td>' + textModules[property] + '</td>'
                            +   '</tr>';

                        index++;
                    }

                    html +=         '</tbody>'
                        +   '</table>';

                    textModulesContainer.innerHTML = html;
                };

                request('/api/v1/cache/getTextModules', queryParams, callback);
            };

            const submitForm = (forceReload = false) => {
                const form = document.getElementById('settingsForm');
                document.getElementById('hidden-reload').value = forceReload;

                if (form.checkValidity()) {
                    form.submit();
                } else {
                    form.reportValidity();
                }
            };

            const showTypes = () => {
                const kindElement = document.getElementById('kind');
                let typesElement = document.getElementById('type');
                typesElement.length = 0;

                types[kindElement.value].forEach(function(item, index) {
                    let option = document.createElement('option');
                    option.value = item.renderer;
                    option.innerHTML = item.name;

                    if (type === item.renderer) {
                        option.selected = true;
                    }

                    typesElement.appendChild(option);
                });
            };

            const types = {{ types|raw }};
            const type = '{{ type }}';

            document.getElementById('kind').addEventListener('change', showTypes);

            const submitOnEnter = function (event) {
                event.preventDefault();
                if (event.keyCode !== 13) {
                    return;
                }

                document.getElementById('createButton').click();
            };

            document.getElementById('template').addEventListener('keyup', submitOnEnter);
            document.getElementById('identifiers').addEventListener('keyup', submitOnEnter);
            document.getElementById('productId').addEventListener('keyup', submitOnEnter);
            document.getElementById('size').addEventListener('keyup', submitOnEnter);
            document.getElementById('format').addEventListener('keyup', submitOnEnter);
            document.getElementById('advertisingMediumCode').addEventListener('keyup', submitOnEnter);

            (function() {
                showTypes();
            })();
        </script>
    </body>
</html>